import 'package:CheckPills/data/datasources/database.dart';
import 'package:flutter/material.dart';
import 'package:drift/drift.dart';

class UserProvider with ChangeNotifier {
  final AppDatabase database;

  User? _activeUser;
  List<User> _allUsers = [];
  bool _isInitialized = false;

  User? get activeUser => _activeUser;
  List<User> get allUsers => _allUsers;
  bool get isInitialized => _isInitialized;

  UserProvider({required this.database}) {
    print("‚úÖ [UserProvider] Criado. Iniciando a inicializa√ß√£o...");
    _initialize();

    database.usersDao.watchAllUsers().listen((users) {
      print("üîî [UserProvider] A stream de usu√°rios foi atualizada. Usu√°rios encontrados: ${users.length}");
      _allUsers = users;

      if (_activeUser == null || !users.any((u) => u.id == _activeUser!.id)) {
        if (users.isNotEmpty) {
          print("üë§ [UserProvider] Selecionando o primeiro usu√°rio como ativo: ${users.first.name}");
          _selectUser(users.first);
        } else {
          print("üë§ [UserProvider] Nenhum usu√°rio ativo para selecionar.");
          _activeUser = null;
        }
      }
      notifyListeners();
    });
  }

  Future<void> _initialize() async {
    print("‚è≥ [UserProvider] Verificando se o primeiro usu√°rio existe...");
    final initialUsers = await database.usersDao.getAllUsers();
    
    if (initialUsers.isEmpty) {
      print("‚úçÔ∏è [UserProvider] Nenhum usu√°rio encontrado. Criando 'Perfil Principal'...");
      await addUser("Perfil Principal");
      print("‚úÖ [UserProvider] 'Perfil Principal' criado.");
    } else {
      print("üëç [UserProvider] Usu√°rios j√° existem. Pulando a cria√ß√£o.");
    }
    
    _isInitialized = true;
    print("üèÅ [UserProvider] Inicializa√ß√£o conclu√≠da. Notificando a UI.");
    notifyListeners();
  }

  void _selectUser(User user) {
    if (_activeUser?.id != user.id) {
      _activeUser = user;
    }
  }

  void selectUser(User user) {
    if (_activeUser?.id != user.id) {
      _activeUser = user;
      print("üîÑ [UserProvider] Usu√°rio trocado manualmente para: ${user.name}");
      notifyListeners();
    }
  }

  Future<void> addUser(String name) async {
    final newUserCompanion = UsersCompanion.insert(name: name);
    final newId = await database.usersDao.addUser(newUserCompanion);

    final defaultSettings = UserSettingsCompanion.insert(
      userId: Value(newId),
      darkMode: const Value(false),
      refillReminder: const Value(5),
    );
    await database.userSettingsDao.updateSettingsForUser(defaultSettings);
  }

  Future<void> deleteUser(int userId) async {
    await database.usersDao.deleteUser(userId);
  }

  Future<void> updateUser(UsersCompanion updatedUser) async {
    await database.usersDao.updateUser(updatedUser);
  }
}